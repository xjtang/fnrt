// Fusion Near Real-time (Lite)
// Near real-time monitoring of forest disturbance by fusion of multi-sensor data
// by Xiaojing Tang (xjtang@bu.edu)

// ---------------------------------------------------------------
// study area
var testArea = ee.Geometry.Polygon(
        [[[-66.73156878460787, -8.662236005089952],
          [-66.73156878460787, -8.916025640576244],
          [-66.44867083538912, -8.916025640576244],
          [-66.44867083538912, -8.662236005089952]]]);
          
// ---------------------------------------------------------------
// model parameters
var trainPeriod = ee.Dictionary({
                    'start': '2017-01-01', 
                    'end': '2020-01-01'});
var monitorPeriod = ee.Dictionary({
                    'start': '2020-01-01', 
                    'end': '2021-01-01'});
var nrtParam = {z: 2, n: 4, m: 5, maxZ: 5};
var lstParam = {band: 'NDFI', minRMSE: 0.05, strikeOnly: false};
var s2Param = {band: 'NDFI', minRMSE: 0.05, strikeOnly: false};
var s1Param = {band: 'VV', minRMSE: 0.01, strikeOnly: true};

// ---------------------------------------------------------------
// Functions to load and preprocess data
var unmixing = function(col) { 
  var gv = [500, 900, 400, 6100, 3000, 1000];
  var npv = [1400, 1700, 2200, 3000, 5500, 3000];
  var soil = [2000, 3000, 3400, 5800, 6000, 5800];
  var shade = [0, 0, 0, 0, 0, 0];
  var cloud = [9000, 9600, 8000, 7800, 7200, 6500];
  var cfThreshold = 0.05;
  return col.map(function(img){
    var unmixed = img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
                    .unmix([gv, shade, npv, soil, cloud], true, true)
                    .rename(['GV','Shade','NPV','Soil','Cloud']);
    var maskCloud = unmixed.select('Cloud').lt(cfThreshold);
    var maskShade = unmixed.select('Shade').lt(1);
    var NDFI = unmixed.expression(
          '10000 * ((GV / (1 - SHADE)) - (NPV + SOIL)) / ((GV / (1 - SHADE)) + (NPV + SOIL))', 
          {
            'GV': unmixed.select('GV'),
            'SHADE': unmixed.select('Shade'),
            'NPV': unmixed.select('NPV'),
            'SOIL': unmixed.select('Soil')
          }).rename('NDFI');
    var maskNDFI = unmixed.expression(
        '(GV / (1 - SHADE)) + (NPV + SOIL)', 
        {
          'GV': unmixed.select('GV'),
          'SHADE': unmixed.select('Shade'),
          'NPV': unmixed.select('NPV'),
          'SOIL': unmixed.select('Soil')
        }).gt(0);
    return img.addBands(unmixed.select(['GV','Shade','NPV','Soil']).multiply(10000))
              .addBands(NDFI).updateMask(maskCloud).updateMask(maskNDFI).updateMask(maskShade);
  });
};

var loadLandsatData = function(region, period) {
  var mask7 = function(img) {
    var mask = img.select(['pixel_qa']).eq(66)
                .or(img.select(['pixel_qa']).eq(68))
                .and(img.select('B1').gt(0));
    return img.updateMask(mask)
              .select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])
              .rename(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']);
  };
  
  var mask8 = function(img) {
    var mask = img.select(['pixel_qa']).eq(322)
                 .or(img.select(['pixel_qa']).eq(324))
                 .and(img.select('B1').gt(0));
    return ee.Image(img).updateMask(mask)
              .select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7'])
              .rename(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']);
  };
  
  var collection7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterDate(period.get('start'), period.get('end'))
      .filterBounds(region).map(mask7);
  var collection8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
      .filterDate(period.get('start'), period.get('end'))
      .filterBounds(region).map(mask8);
  return ee.ImageCollection(unmixing(collection7.merge(collection8)));
};

var loadS2Data = function(region, period) {
  var maskS2Img = function(img) {
    var qa = img.select('QA60');
    var cloud = ee.Image(img.get('cloud_prob')).select('probability');
    var cloudProbMask = cloud.lt(65);
    var cloudBitMask = 1 << 10;
    var cirrusBitMask = 1 << 11;
    var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
        .and(qa.bitwiseAnd(cirrusBitMask).eq(0))
        .and(cloudProbMask);
    return img.select(['B2', 'B3', 'B4', 'B8', 'B11', 'B12'])
              .rename(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']).updateMask(mask);
  };  

  var S2 = ee.ImageCollection('COPERNICUS/S2')
      .filterBounds(region).filterDate(period.get('start'), period.get('end'));
  var S2Cloud = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
      .filterBounds(region).filterDate(period.get('start'), period.get('end'));
  var S2Joined = ee.ImageCollection(ee.Join.saveFirst('cloud_prob').apply({
    primary: S2,
    secondary: S2Cloud,
    condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
  }));
  var masked = ee.ImageCollection(S2Joined.map(function(img){
    return maskS2Img(img);
  }));
  return ee.ImageCollection(unmixing(masked));
};

var loadS1Data = function(region, period){
  var slopeLib = require('users/xjtang/fnrt:External/slope_correction_lib.js');
  
  var spatialMean = function(img) {
    var st = img.get('system:time_start');
    var geom = img.geometry();
    var angle = img.select('angle');
    var edge = img.select('VV').lt(-30.0);
    var fmean = img.select('V.').add(30);
    fmean = fmean.focal_mean(3, 'circle');
    var ratio = fmean.select('VH').divide(fmean.select('VV')).rename('ratio').multiply(30);
    return img.select().addBands(fmean).addBands(ratio).addBands(angle).set('timeStamp', st);
  };
  
  var S1 = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterBounds(region).filterDate(period.get('start'), period.get('end'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .select(['V.','angle']).map(spatialMean)
    .select(['VH','VV','ratio','angle']);
  var passCount = ee.Dictionary(S1.aggregate_histogram('orbitProperties_pass'));
  var passValues = passCount.values().sort().reverse();
  var higherCount = passValues.get(0);
  var maxOrbitalPass = passCount.keys().get(passCount.values().indexOf(higherCount));
  var S1Filtered = S1.filter(ee.Filter.eq('orbitProperties_pass', maxOrbitalPass));
  var S1Corrected = slopeLib.slope_correction(S1Filtered);
  return ee.ImageCollection(S1Corrected.map(function(img) {
    var st = img.get('timeStamp');
    return img.addBands(img.select('VH').divide(img.select('VV'))
              .rename('ratio').multiply(10)).set('system:time_start', st);
  }));
};

// ---------------------------------------------------------------
// load forest mask
var hansen = ee.Image('UMD/hansen/global_forest_change_2020_v1_8').unmask();
var forestMask = hansen.select('treecover2000').gt(50)
                  .add(hansen.select('gain'))
                  .subtract(hansen.select('loss'))
                  .add(hansen.select('lossyear').eq(20))
                  .gt(0).clip(testArea);
                  
// ---------------------------------------------------------------
// load and check data
var lstTraining = loadLandsatData(testArea, trainPeriod);
var lstMonitoring = loadLandsatData(testArea, monitorPeriod);
var s2Training = loadS2Data(testArea, trainPeriod);
var s2Monitoring = loadS2Data(testArea, monitorPeriod);
var s1Training = loadS1Data(testArea, trainPeriod);
var s1Monitoring = loadS1Data(testArea, monitorPeriod);

var maskVis = {min: 0, max: 1, palette: ['blue', 'green']};
Map.addLayer(forestMask, maskVis, 'Forest Mask', false);
print(lstTraining); print(lstMonitoring);
print(s2Training); print(s2Monitoring);
print(s1Training); print(s1Monitoring);

// ---------------------------------------------------------------
// establish baseline time series model
var toFracYear = function(date) {
  var year = date.get('year');
  var fYear = date.difference(ee.Date.fromYMD(year, 1, 1), 'year');
  return year.add(fYear);
};

var fitHarmonicModel = function(col, band) {
  var prepareData = function(col, band) {
    return ee.ImageCollection(col.map(function(img){
      return addDependents(img.select(band)).select(['INTP', 'SLP', 'COS', 'SIN', 'COS2', 'SIN2', 'COS3', 'SIN3', band])
              .updateMask(img.select(band).mask());
    }));
  };
  var addDependents = function(img){
    var t = ee.Number(toFracYear(ee.Date(img.get('system:time_start')), 1));
    var omega = 2.0 * Math.PI;
    var dependents = ee.Image.constant([1, t, t.multiply(omega).cos(),
                                        t.multiply(omega).sin(),
                                        t.multiply(omega * 2).cos(),
                                        t.multiply(omega * 2).sin(),
                                        t.multiply(omega * 3).cos(),
                                        t.multiply(omega * 3).sin()]).float()
                                        .rename(['INTP', 'SLP', 'COS', 'SIN', 'COS2', 'SIN2', 'COS3', 'SIN3']);
    return img.addBands(dependents);
  };
  var col2 = prepareData(col, band);
  var ccd = col2.reduce(ee.Reducer.robustLinearRegression(8, 1), 4).rename([band + '_coefs', band + '_rmse']);
  return ccd.select(band + '_coefs').arrayTranspose().addBands(ccd.select(band + '_rmse'));
};

var lstModel = fitHarmonicModel(lstTraining, lstParam.band)
                .set({region: 'test', sensor: 'Landsat'});
var s2Model = fitHarmonicModel(s2Training, s2Param.band)
                .set({region: 'test', sensor: 'Sentinel-2'});
var s1tModel = fitHarmonicModel(s1Training, s1Param.band)
                .set({region: 'test', sensor: 'Sentinel-1'});

var saveModel = function(model, prefix) {
  Export.image.toAsset({
        image: model,
        scale: 30,
        assetId: prefix + '_CCD',
        description: 'Save_' + prefix + '_CCD',
        region: testArea,
        maxPixels: 1e13,
        pyramidingPolicy: {'.default': 'sample'}
  });
};

saveModel(lstModel, 'LST');
saveModel(s2Model, 'S2');
saveModel(s1tModel, 'S1');

var lstModel2 = ee.ImageCollection('projects/bu-nearrealtime/lite/ccd')
                  .filterMetadata('sensor','equals','Landsat').first();
var s2Model2 = ee.ImageCollection('projects/bu-nearrealtime/lite/ccd')
                  .filterMetadata('sensor','equals','Sentinel-2').first();
var s1Model2 = ee.ImageCollection('projects/bu-nearrealtime/lite/ccd')
                  .filterMetadata('sensor','equals','Sentinel-1').first();

// ---------------------------------------------------------------
// create predicted values for the monitoring period
var dearrayModel = function(model, band) {
  band = band + '_';
  var genCoefImg = function(model, band, coef) {
    var zeros = ee.Array(0).repeat(0, 1);
    var coefImg = model.select(band + coef).arrayCat(zeros, 0).float().arraySlice(0, 0, 1);
    return ee.Image(coefImg.arrayFlatten([[ee.String('S1_').cat(band).cat(coef)]]));
  };
  var genHarmImg = function(model, band) {
    var harms = ['INTP', 'SLP', 'COS', 'SIN', 'COS2', 'SIN2', 'COS3', 'SIN3'];
    var zeros = ee.Image(ee.Array([ee.List.repeat(0, harms.length)])).arrayRepeat(0, 1);
    var coefImg = model.select(band + 'coefs').arrayCat(zeros, 0).float().arraySlice(0, 0, 1);
    return ee.Image(coefImg.arrayFlatten([[ee.String(band).cat('coef')], harms]));
  };
  var rmse = genCoefImg(model, band, 'rmse');
  var coef = genHarmImg(model, band);
  return ee.Image.cat(rmse, coef);
};

var createPredImg = function(modelImg, img, band, sensor) {
  var date = toFracYear(ee.Date(img.get('system:time_start')));
  var dateString = ee.Date(img.get('system:time_start')).format('yyyyMMdd');
  var coefs = ['INTP', 'SLP', 'COS', 'SIN', 'COS2', 'SIN2', 'COS3', 'SIN3'];
  var coef = ee.Image(coefs.map(function(coef){
                return modelImg.select(".*".concat(coef));
              })).rename(coefs);
  var t = ee.Number(date);
  var omega = 2.0 * Math.PI;
  var pred = ee.Image.constant([1, t, t.multiply(omega).cos(),
                                    t.multiply(omega).sin(),
                                    t.multiply(omega * 2).cos(),
                                    t.multiply(omega * 2).sin(),
                                    t.multiply(omega * 3).cos(),
                                    t.multiply(omega * 3).sin()]).float();
  return pred.multiply(coef).reduce('sum').addBands(img, [band]).rename(['predicted', band])
            .set({'sensor': sensor, 'system:time_start': img.get('system:time_start'), 'dateString': dateString});
};

var addPredicted = function(data, modelImg, band, sensor) {
  return ee.ImageCollection(data.map(function(img){
    return createPredImg(modelImg, img, band, sensor);
  }));
};

var lstModelImg = dearrayModel(lstModel2, lstParam.band);
var s2ModelImg = dearrayModel(s2Model2, s2Param.band);
var s1ModelImg = dearrayModel(s1Model2, s1Param.band);

var lstPredicted = addPredicted(lstMonitoring, lstModelImg, lstParam.band, 'Landsat');
var s2Predicted = addPredicted(s2Monitoring, s2ModelImg, s2Param.band, 'Sentinel-2');
var s1Predicted = addPredicted(s1Monitoring, s1ModelImg, s1Param.band, 'Sentinel-1');

print(lstPredicted);

// ---------------------------------------------------------------
// calculate change score
var addResiduals = function(data, band) {
  return ee.ImageCollection(data.map(function(img) {
    return img.select('predicted').where(img.select('predicted').gt(10000), 10000)
              .subtract(img.select(band)).rename('residual')
              .set({'sensor': img.get('sensor'), 'system:time_start': img.get('system:time_start'),
                    'dateString': img.get('dateString')});
  })); 
};

var addChangeScores = function(data, rmse, minRMSE, threshold, strikeOnly) {
  var mask = ee.Image(0);
  if (strikeOnly) {mask = ee.Image(1)}
  return ee.ImageCollection(data.map(function(img) {
    var z = img.divide(rmse.max(minRMSE));
    var strike = z.multiply(z.gt(threshold));
    var zStack = ee.Image.cat(z, strike).rename(['z', 'strike'])
                    .set({'sensor': img.get('sensor'), 'system:time_start': img.get('system:time_start')});
    return zStack.updateMask(strike.gt(0).or(mask));
  })); 
};

var lstResiduals = addResiduals(lstPredicted, lstParam.band);
var s2Residuals = addResiduals(s2Predicted, s2Param.band);
var s1Residuals = addResiduals(s1Predicted, s1Param.band);

var lstScores = addChangeScores(lstResiduals, lstModelImg.select('.*rmse'), 
                                lstPredicted.select(lstParam.band).mean().abs().multiply(lstParam.minRMSE), 
                                nrtParam.z, lstParam.strikeOnly);
var s2Scores = addChangeScores(s2Residuals, s2ModelImg.select('.*rmse'), 
                                s2Predicted.select(s2Param.band).mean().abs().multiply(s2Param.minRMSE), 
                                nrtParam.z, s2Param.strikeOnly);
var s1Scores = addChangeScores(s1Residuals, s1ModelImg.select('.*rmse'), 
                                s1Predicted.select(s1Param.band).mean().abs().multiply(s1Param.minRMSE), 
                                nrtParam.z, s1Param.strikeOnly);
                                
print(lstScores);

// ---------------------------------------------------------------
// multi-sensor data fusion and change detection
var fused = lstScores.merge(s2Scores).merge(s1Scores)
                      .sort('system:time_start');
print(fused);

var monitorChange = function(changeScores, nrtParam) {
  var zeros = ee.Image(0).addBands(ee.Image(0)).rename(['change', 'date']);
  var shift = Math.pow(2, nrtParam.m - 1) - 1;
  var monitor = function(img, result) {
    var change = ee.Image(result).select('change');
    var date = ee.Image(result).select('date');
    var shiftImg = img.select('z').mask().eq(0).multiply(shift+1).add(shift);
    change = change.bitwiseAnd(shiftImg).multiply(shiftImg.eq(shift).add(1))
                    .add(img.select('strike').unmask().gt(0));
    date = date.add(change.bitCount().gte(nrtParam.n).multiply(date.eq(0))
                .multiply(ee.Number(toFracYear(ee.Date(img.get('system:time_start')), 1))));
    return(change.addBands(date));
  };
  return ee.Image(changeScores.iterate(monitor, zeros)).select('date').rename('Alerts').selfMask();
};

var alerts = monitorChange(fused, nrtParam).updateMask(forestMask);
print(alerts);
var altVisParam = {min: 2020.4, max: 2021,
                    palette: ['FF0080', 'EC1280', 'DA2480', 'C83680', 'B64880', 'A35B80', '916D80', 
                              '7F7F80', '6D9180', '5BA380', '48B680', '36C880', '24DA80', '12EC80',
                              '00FF80', '00EB89', '00D793', '00C49D', '00B0A7', '009CB0', '0089BA', 
                              '0075C4', '0062CE', '004ED7', '003AE1', '0027EB', '0013F5', '0000FF']};
Map.addLayer(alerts, altVisParam, 'Forest Disturbance Map (2020)');
Map.centerObject(testArea, 10);
Map.setOptions('SATELLITE');

// End